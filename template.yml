apiVersion: v1
kind: Template
labels:
  template: project-pipeline-template

message: |-
  A Jenkins server must be instantiated in this project to manage
  the Pipeline BuildConfig created by this template.
  You will be able to log in to it using your OpenShift user credentials.

metadata:
  annotations:
    openshift.io/display-name: Pipeline Build Example
    description: |-
      This example showcases the new Jenkins Pipeline integration in OpenShift,
      which performs continuous integration and deployment
      right on the platform. The template contains a Jenkinsfile - a definition
      of a multi-stage CI/CD process - that leverages the underlying OpenShift
      platform for dynamic and scalable builds.
      OpenShift integrates the status of your pipeline builds into the web
      console allowing you to see your entire
      application lifecycle in a single view.
    iconClass: icon-jenkins
    tags: generic
  name: project-pipeline

parameters:
- description: The name assigned to all of the
    frontend objects defined in this template.
  displayName: Project
  name: PROJECT
  required: true
  value: project

- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SRC_REPO_URL
  required: true
  value: https://github.com/robchrob/openshift-project-pipeline.git

- description: Set this to a branch name, tag or
    other ref of your repository if you are not using the default branch.
  displayName: Git Reference
  name: SRC_REPO_REF
  value: develop

- description: Set this to the relative path to your project if
    it is not in the root of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR

- description: Github trigger secret. A difficult to guess string
    encoded as part of the webhook URL. Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET

- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET

- description: Image to run as base.
  displayName: Image base
  name: FROM_IMG
  required: true
  value: origin-jenkins-agent-base:latest

objects:
- apiVersion: v1
  kind: ConfigMap
  data:
    template1: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>base</name>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>base</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <volumes/>
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>openshift/${FROM_IMG}</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu></resourceRequestCpu>
            <resourceRequestMemory></resourceRequestMemory>
            <resourceLimitCpu></resourceLimitCpu>
            <resourceLimitMemory></resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
        <nodeProperties/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
  metadata:
    labels:
      role: jenkins-slave
    name: jenkins-plugin

- apiVersion: v1
  kind: BuildConfig

  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: |-
        '[{"name": "${PROJECT}", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      name: ${PROJECT}-pipeline
    name: ${PROJECT}-pipeline

  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          pipeline
          {
              agent
              {
                  label 'base'
              }
              stages
              {
                  stage('Build')
                  {
                      steps
                      {
                          script
                          {
                              openshift.withCluster()
                              {
                                  openshift.withProject()
                                  {
                                      def bld =
                                          openshift.startBuild('${PROJECT}-build') ;
                                      bld.untilEach
                                      {
                                          return it.object().status.phase == "Running" ;
                                      }
                                      bld.logs('-f') ;
                                  }
                              }
                          }
                      }
                  }
              }
          }
      type: JenkinsPipeline

    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic

- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    name: ${PROJECT}-build
  spec:
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SRC_REPO_REF}
        uri: ${SRC_REPO_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: "BUILD_LOGLEVEL"
            value: "5"
        from:
          kind: ImageStreamTag
          name: openshift/${FROM_IMG}
          namespace: openshift
      type: Source

    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
